{
  "version": 3,
  "sources": ["external-global:Serenity.Extensions", "../../../Modules/CrmDB/ContactAddress/ContactAddressEditor.ts", "../../../Modules/ServerTypes/CrmDB/AddressColumns.ts", "../../../Modules/CrmDB/City/CityDialog.ts", "../../../Modules/CrmDB/Jurisdiction/JurisdictionDialog.ts", "../../../Modules/CrmDB/ZipCode/ZipCodeDialog.ts", "../../../Modules/ServerTypes/CrmDB/AddressForm.ts", "../../../Modules/ServerTypes/CrmDB/AddressRow.ts", "../../../Modules/ServerTypes/CrmDB/AddressService.ts", "../../../Modules/ServerTypes/CrmDB/CityColumns.ts", "../../../Modules/ServerTypes/CrmDB/CityForm.ts", "../../../Modules/ServerTypes/CrmDB/CityRow.ts", "../../../Modules/ServerTypes/CrmDB/CityService.ts", "../../../Modules/ServerTypes/CrmDB/ContactAddressColumns.ts", "../../../Modules/CrmDB/Address/AddressDialog.ts", "../../../Modules/ServerTypes/CrmDB/ContactAddressForm.ts", "../../../Modules/ServerTypes/CrmDB/ContactAddressRow.ts", "../../../Modules/ServerTypes/CrmDB/ContactAddressService.ts", "../../../Modules/ServerTypes/CrmDB/ContactColumns.ts", "../../../Modules/CrmDB/ContactPerson/ContactPersonEditor.ts", "../../../Modules/CrmDB/ContactPerson/ContactPersonEditDialog.ts", "../../../Modules/ServerTypes/CrmDB/ContactForm.ts", "../../../Modules/ServerTypes/CrmDB/ContactPersonColumns.ts", "../../../Modules/CrmDB/Person/PersonDialog.ts", "../../../Modules/ServerTypes/CrmDB/ContactPersonForm.ts", "../../../Modules/ServerTypes/CrmDB/ContactPersonRow.ts", "../../../Modules/ServerTypes/CrmDB/ContactPersonService.ts", "../../../Modules/ServerTypes/CrmDB/ContactRow.ts", "../../../Modules/ServerTypes/CrmDB/ContactService.ts", "../../../Modules/ServerTypes/CrmDB/GenderColumns.ts", "../../../Modules/ServerTypes/CrmDB/GenderForm.ts", "../../../Modules/ServerTypes/CrmDB/GenderRow.ts", "../../../Modules/ServerTypes/CrmDB/GenderService.ts", "../../../Modules/ServerTypes/CrmDB/JurisdictionColumns.ts", "../../../Modules/ServerTypes/CrmDB/JurisdictionForm.ts", "../../../Modules/ServerTypes/CrmDB/JurisdictionRow.ts", "../../../Modules/ServerTypes/CrmDB/JurisdictionService.ts", "../../../Modules/ServerTypes/CrmDB/PersonColumns.ts", "../../../Modules/ServerTypes/CrmDB/PersonForm.ts", "../../../Modules/ServerTypes/CrmDB/PersonRow.ts", "../../../Modules/ServerTypes/CrmDB/PersonService.ts", "../../../Modules/ServerTypes/CrmDB/TaxCategoryColumns.ts", "../../../Modules/ServerTypes/CrmDB/TaxCategoryForm.ts", "../../../Modules/ServerTypes/CrmDB/TaxCategoryRow.ts", "../../../Modules/ServerTypes/CrmDB/TaxCategoryService.ts", "../../../Modules/ServerTypes/CrmDB/ZipCodeColumns.ts", "../../../Modules/ServerTypes/CrmDB/ZipCodeForm.ts", "../../../Modules/ServerTypes/CrmDB/ZipCodeRow.ts", "../../../Modules/ServerTypes/CrmDB/ZipCodeService.ts", "../../../Modules/CrmDB/ContactAddress/ContactAddressEditDialog.ts"],
  "sourcesContent": ["module.exports = Serenity.Extensions;", "import { Decorators } from '@serenity-is/corelib';\nimport { GridEditorBase } from '@serenity-is/extensions';\nimport { AddressRow, ContactAddressColumns, ContactAddressRow } from '@/ServerTypes/CrmDB';\r\nimport { ContactAddressEditDialog } from './ContactAddressEditDialog';\r\n\r\n@Decorators.registerEditor('CultureLinkCRM.CrmDB.ContactAddressEditor')\nexport class ContactAddressEditor extends GridEditorBase<ContactAddressRow> {\n    protected getColumnsKey() { return ContactAddressColumns.columnsKey; }\n    protected getLocalTextPrefix() { return ContactAddressRow.localTextPrefix; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected getDialogType() { return ContactAddressEditDialog; }\n\n    protected getAddButtonCaption() { return \"Add\"; }\n\n    protected validateEntity(row: ContactAddressRow, id: number) {\r\n        if (!super.validateEntity(row, id))\r\n            return false;\r\n\r\n        var itemId = id ?? row[this.getIdProperty()];\n\r\n        AddressRow.getLookupAsync().then(x => {\r\n            var item = this.view?.getItemById(itemId);\r\n            if (item) {\n                item.AddressLine1 = x.itemById[row.AddressId].AddressLine1;\n                item.CityName = x.itemById[row.AddressId].CityName;\n                \r\n                this.view.updateItem(itemId, item);\r\n            }\r\n        });\r\n\r\n        return true;\r\n    }\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { AddressRow } from \"./AddressRow\";\n\nexport interface AddressColumns {\n    AddressId: Column<AddressRow>;\n    AddressLine1: Column<AddressRow>;\n    CityName: Column<AddressRow>;\n    JurisdictionAbbreviation: Column<AddressRow>;\n    ZipCodeName: Column<AddressRow>;\n}\n\nexport class AddressColumns extends ColumnsBase<AddressRow> {\n    static readonly columnsKey = 'CrmDB.Address';\n    static readonly Fields = fieldsProxy<AddressColumns>();\n}", "\uFEFFimport { CityForm, CityRow, CityService } from '@/ServerTypes/CrmDB';\r\nimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\n\r\n@Decorators.registerClass('CultureLinkCRM.CrmDB.CityDialog')\nexport class CityDialog extends EntityDialog<CityRow, any> {\n    protected getFormKey() { return CityForm.formKey; }\n    protected getRowDefinition() { return CityRow; }\n    protected getService() { return CityService.baseUrl; }\n\n    protected form = new CityForm(this.idPrefix);\n}", "\uFEFFimport { JurisdictionForm, JurisdictionRow, JurisdictionService } from '@/ServerTypes/CrmDB';\r\nimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\n\r\n@Decorators.registerClass('CultureLinkCRM.CrmDB.JurisdictionDialog')\nexport class JurisdictionDialog extends EntityDialog<JurisdictionRow, any> {\n    protected getFormKey() { return JurisdictionForm.formKey; }\n    protected getRowDefinition() { return JurisdictionRow; }\n    protected getService() { return JurisdictionService.baseUrl; }\n\n    protected form = new JurisdictionForm(this.idPrefix);\n}", "\uFEFFimport { ZipCodeForm, ZipCodeRow, ZipCodeService } from '@/ServerTypes/CrmDB';\r\nimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\n\r\n@Decorators.registerClass('CultureLinkCRM.CrmDB.ZipCodeDialog')\nexport class ZipCodeDialog extends EntityDialog<ZipCodeRow, any> {\n    protected getFormKey() { return ZipCodeForm.formKey; }\n    protected getRowDefinition() { return ZipCodeRow; }\n    protected getService() { return ZipCodeService.baseUrl; }\n\n    protected form = new ZipCodeForm(this.idPrefix);\n}", "\uFEFFimport { CityDialog } from \"@/CrmDB/City/CityDialog\";\nimport { JurisdictionDialog } from \"@/CrmDB/Jurisdiction/JurisdictionDialog\";\nimport { ZipCodeDialog } from \"@/CrmDB/ZipCode/ZipCodeDialog\";\nimport { StringEditor, LookupEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface AddressForm {\n    AddressLine1: StringEditor;\n    AddressLine2: StringEditor;\n    MailCode: StringEditor;\n    PostalCode: StringEditor;\n    CityId: LookupEditor;\n    JurisdictionId: LookupEditor;\n    ZipCodeId: LookupEditor;\n}\n\nexport class AddressForm extends PrefixedContext {\n    static readonly formKey = 'CrmDB.Address';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!AddressForm.init)  {\n            AddressForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = LookupEditor;\n\n            initFormType(AddressForm, [\n                'AddressLine1', w0,\n                'AddressLine2', w0,\n                'MailCode', w0,\n                'PostalCode', w0,\n                'CityId', w1,\n                'JurisdictionId', w1,\n                'ZipCodeId', w1\n            ]);\n        }\n    }\n}\n\n[CityDialog, JurisdictionDialog, ZipCodeDialog]; // referenced types", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface AddressRow {\n    AddressId?: number;\n    AddressLine1?: string;\n    AddressLine2?: string;\n    AddressLine3?: string;\n    InternationalLine1?: string;\n    InternationalLine2?: string;\n    InternationalLine3?: string;\n    MailCode?: string;\n    PostalCode?: string;\n    CityId?: number;\n    CityName?: string;\n    JurisdictionId?: number;\n    JurisdictionName?: string;\n    JurisdictionAbbreviation?: string;\n    ZipCodeId?: number;\n    ZipCodeName?: string;\n}\n\nexport abstract class AddressRow {\n    static readonly idProperty = 'AddressId';\n    static readonly nameProperty = 'AddressLine1';\n    static readonly localTextPrefix = 'CrmDB.Address';\n    static readonly lookupKey = 'CrmDB.Address';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<AddressRow>('CrmDB.Address') }\n    static async getLookupAsync() { return getLookupAsync<AddressRow>('CrmDB.Address') }\n\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<AddressRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { AddressRow } from \"./AddressRow\";\n\nexport namespace AddressService {\n    export const baseUrl = 'CrmDB/Address';\n\n    export declare function Create(request: SaveRequest<AddressRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<AddressRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<AddressRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<AddressRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"CrmDB/Address/Create\",\n        Update: \"CrmDB/Address/Update\",\n        Delete: \"CrmDB/Address/Delete\",\n        Retrieve: \"CrmDB/Address/Retrieve\",\n        List: \"CrmDB/Address/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>AddressService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { CityRow } from \"./CityRow\";\n\nexport interface CityColumns {\n    CityId: Column<CityRow>;\n    Name: Column<CityRow>;\n}\n\nexport class CityColumns extends ColumnsBase<CityRow> {\n    static readonly columnsKey = 'CrmDB.City';\n    static readonly Fields = fieldsProxy<CityColumns>();\n}", "\uFEFFimport { StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface CityForm {\n    Name: StringEditor;\n}\n\nexport class CityForm extends PrefixedContext {\n    static readonly formKey = 'CrmDB.City';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!CityForm.init)  {\n            CityForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(CityForm, [\n                'Name', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface CityRow {\n    CityId?: number;\n    Name?: string;\n}\n\nexport abstract class CityRow {\n    static readonly idProperty = 'CityId';\n    static readonly nameProperty = 'Name';\n    static readonly localTextPrefix = 'CrmDB.City';\n    static readonly lookupKey = 'CrmDB.City';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<CityRow>('CrmDB.City') }\n    static async getLookupAsync() { return getLookupAsync<CityRow>('CrmDB.City') }\n\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<CityRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { CityRow } from \"./CityRow\";\n\nexport namespace CityService {\n    export const baseUrl = 'CrmDB/City';\n\n    export declare function Create(request: SaveRequest<CityRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CityRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CityRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<CityRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"CrmDB/City/Create\",\n        Update: \"CrmDB/City/Update\",\n        Delete: \"CrmDB/City/Delete\",\n        Retrieve: \"CrmDB/City/Retrieve\",\n        List: \"CrmDB/City/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>CityService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { ContactAddressRow } from \"./ContactAddressRow\";\n\nexport interface ContactAddressColumns {\n    ContactAddressId: Column<ContactAddressRow>;\n    AddressLine1: Column<ContactAddressRow>;\n    CityName: Column<ContactAddressRow>;\n    JurisdictionName: Column<ContactAddressRow>;\n    ZipCodeName: Column<ContactAddressRow>;\n}\n\nexport class ContactAddressColumns extends ColumnsBase<ContactAddressRow> {\n    static readonly columnsKey = 'CrmDB.ContactAddress';\n    static readonly Fields = fieldsProxy<ContactAddressColumns>();\n}", "\uFEFFimport { AddressForm, AddressRow, AddressService } from '@/ServerTypes/CrmDB';\r\nimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\n\r\n@Decorators.registerClass('CultureLinkCRM.CrmDB.AddressDialog')\nexport class AddressDialog extends EntityDialog<AddressRow, any> {\n    protected getFormKey() { return AddressForm.formKey; }\n    protected getRowDefinition() { return AddressRow; }\n    protected getService() { return AddressService.baseUrl; }\n\n    protected form = new AddressForm(this.idPrefix);\n}", "\uFEFFimport { AddressDialog } from \"@/CrmDB/Address/AddressDialog\";\nimport { LookupEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface ContactAddressForm {\n    AddressId: LookupEditor;\n}\n\nexport class ContactAddressForm extends PrefixedContext {\n    static readonly formKey = 'CrmDB.ContactAddress';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ContactAddressForm.init)  {\n            ContactAddressForm.init = true;\n\n            var w0 = LookupEditor;\n\n            initFormType(ContactAddressForm, [\n                'AddressId', w0\n            ]);\n        }\n    }\n}\n\n[AddressDialog]; // referenced types", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface ContactAddressRow {\n    ContactAddressId?: number;\n    ContactId?: number;\n    AddressId?: number;\n    Future?: string;\n    ContactName?: string;\n    AddressLine1?: string;\n    CityId?: number;\n    CityName?: string;\n    JurisdictionId?: number;\n    JurisdictionName?: string;\n    ZipCodeId?: number;\n    ZipCodeName?: string;\n}\n\nexport abstract class ContactAddressRow {\n    static readonly idProperty = 'ContactAddressId';\n    static readonly nameProperty = 'Future';\n    static readonly localTextPrefix = 'CrmDB.ContactAddress';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<ContactAddressRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { ContactAddressRow } from \"./ContactAddressRow\";\n\nexport namespace ContactAddressService {\n    export const baseUrl = 'CrmDB/ContactAddress';\n\n    export declare function Create(request: SaveRequest<ContactAddressRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<ContactAddressRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ContactAddressRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ContactAddressRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"CrmDB/ContactAddress/Create\",\n        Update: \"CrmDB/ContactAddress/Update\",\n        Delete: \"CrmDB/ContactAddress/Delete\",\n        Retrieve: \"CrmDB/ContactAddress/Retrieve\",\n        List: \"CrmDB/ContactAddress/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>ContactAddressService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { ContactRow } from \"./ContactRow\";\n\nexport interface ContactColumns {\n    ContactId: Column<ContactRow>;\n    Name: Column<ContactRow>;\n    TaxCategoryName: Column<ContactRow>;\n    TaxNumber: Column<ContactRow>;\n}\n\nexport class ContactColumns extends ColumnsBase<ContactRow> {\n    static readonly columnsKey = 'CrmDB.Contact';\n    static readonly Fields = fieldsProxy<ContactColumns>();\n}", "import { Decorators, EntityGrid } from '@serenity-is/corelib';\nimport { GridEditorBase } from \"@serenity-is/extensions\";\nimport { ContactPersonColumns, ContactPersonRow, ContactPersonService, PersonRow } from '@/ServerTypes/CrmDB';\nimport { ContactPersonEditDialog } from \"./ContactPersonEditDialog\";\r\n\r\n@Decorators.registerEditor('CultureLinkCRM.CrmDB.ContactPersonEditor')\nexport class ContactPersonEditor extends GridEditorBase<ContactPersonRow> {\n    protected getColumnsKey() { return ContactPersonColumns.columnsKey; }\n    protected getLocalTextPrefix() { return ContactPersonRow.localTextPrefix; }\n\n    protected getRowDefinition() { return ContactPersonRow; }\n    protected getService() { return ContactPersonService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected getDialogType() { return ContactPersonEditDialog; }\r\n\r\n    protected getAddButtonCaption() {\r\n        return \"Add\";\r\n    }\n\n    protected validateEntity(row: ContactPersonRow, id: number) {\r\n        if (!super.validateEntity(row, id))\r\n            return false;\r\n\r\n        var itemId = id ?? row[this.getIdProperty()];\n\r\n        PersonRow.getLookupAsync().then(x => {\r\n            var item = this.view?.getItemById(itemId);\r\n            if (item) {\r\n                item.PersonFullName = x.itemById[row.PersonId].FullName;\r\n                this.view.updateItem(itemId, item);\r\n            }\r\n        });\r\n\r\n        return true;\r\n    }\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\nimport { GridEditorDialog } from \"@serenity-is/extensions\";\nimport { ContactPersonForm, ContactPersonRow, ContactPersonService } from '@/ServerTypes/CrmDB';\r\n\r\n\r\n@Decorators.registerClass('CultureLinkCRM.CrmDB.ContactPersonEditDialog')\nexport class ContactPersonEditDialog extends GridEditorDialog<ContactPersonRow> {\n\n    protected getFormKey() { return ContactPersonForm.formKey; }\n    protected getNameProperty() { return ContactPersonRow.nameProperty; }\r\n    protected getLocalTextPrefix() { return ContactPersonRow.localTextPrefix; }\n\n    //protected getRowDefinition() { return ContactPersonRow; }\n    //protected getService() { return ContactPersonService.baseUrl; }\n\n    protected form = new ContactPersonForm(this.idPrefix);\n}", "\uFEFFimport { ContactAddressEditor } from \"@/CrmDB/ContactAddress/ContactAddressEditor\";\nimport { ContactPersonEditor } from \"@/CrmDB/ContactPerson/ContactPersonEditor\";\nimport { StringEditor, LookupEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface ContactForm {\n    Name: StringEditor;\n    TaxCategoryId: LookupEditor;\n    TaxNumber: StringEditor;\n    PersonList: ContactPersonEditor;\n    AddressList: ContactAddressEditor;\n}\n\nexport class ContactForm extends PrefixedContext {\n    static readonly formKey = 'CrmDB.Contact';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ContactForm.init)  {\n            ContactForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = LookupEditor;\n            var w2 = ContactPersonEditor;\n            var w3 = ContactAddressEditor;\n\n            initFormType(ContactForm, [\n                'Name', w0,\n                'TaxCategoryId', w1,\n                'TaxNumber', w0,\n                'PersonList', w2,\n                'AddressList', w3\n            ]);\n        }\n    }\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { ContactPersonRow } from \"./ContactPersonRow\";\n\nexport interface ContactPersonColumns {\n    ContactPersonId: Column<ContactPersonRow>;\n    PersonFullName: Column<ContactPersonRow>;\n}\n\nexport class ContactPersonColumns extends ColumnsBase<ContactPersonRow> {\n    static readonly columnsKey = 'CrmDB.ContactPerson';\n    static readonly Fields = fieldsProxy<ContactPersonColumns>();\n}", "\uFEFFimport { PersonForm, PersonRow, PersonService } from '@/ServerTypes/CrmDB';\r\nimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\n\r\n@Decorators.registerClass('CultureLinkCRM.CrmDB.PersonDialog')\nexport class PersonDialog extends EntityDialog<PersonRow, any> {\n    protected getFormKey() { return PersonForm.formKey; }\n    protected getRowDefinition() { return PersonRow; }\n    protected getService() { return PersonService.baseUrl; }\n\n    protected form = new PersonForm(this.idPrefix);\n}", "\uFEFFimport { PersonDialog } from \"@/CrmDB/Person/PersonDialog\";\nimport { LookupEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface ContactPersonForm {\n    PersonId: LookupEditor;\n}\n\nexport class ContactPersonForm extends PrefixedContext {\n    static readonly formKey = 'CrmDB.ContactPerson';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ContactPersonForm.init)  {\n            ContactPersonForm.init = true;\n\n            var w0 = LookupEditor;\n\n            initFormType(ContactPersonForm, [\n                'PersonId', w0\n            ]);\n        }\n    }\n}\n\n[PersonDialog]; // referenced types", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface ContactPersonRow {\n    ContactPersonId?: number;\n    ContactId?: number;\n    PersonId?: number;\n    Future?: string;\n    ContactName?: string;\n    PersonFullName?: string;\n}\n\nexport abstract class ContactPersonRow {\n    static readonly idProperty = 'ContactPersonId';\n    static readonly nameProperty = 'Future';\n    static readonly localTextPrefix = 'CrmDB.ContactPerson';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<ContactPersonRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { ContactPersonRow } from \"./ContactPersonRow\";\n\nexport namespace ContactPersonService {\n    export const baseUrl = 'CrmDB/ContactPerson';\n\n    export declare function Create(request: SaveRequest<ContactPersonRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<ContactPersonRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ContactPersonRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ContactPersonRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"CrmDB/ContactPerson/Create\",\n        Update: \"CrmDB/ContactPerson/Update\",\n        Delete: \"CrmDB/ContactPerson/Delete\",\n        Retrieve: \"CrmDB/ContactPerson/Retrieve\",\n        List: \"CrmDB/ContactPerson/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>ContactPersonService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\nimport { ContactAddressRow } from \"./ContactAddressRow\";\nimport { ContactPersonRow } from \"./ContactPersonRow\";\n\nexport interface ContactRow {\n    ContactId?: number;\n    Name?: string;\n    TaxCategoryId?: number;\n    TaxCategoryName?: string;\n    TaxNumber?: string;\n    PersonList?: ContactPersonRow[];\n    AddressList?: ContactAddressRow[];\n}\n\nexport abstract class ContactRow {\n    static readonly idProperty = 'ContactId';\n    static readonly nameProperty = 'Name';\n    static readonly localTextPrefix = 'CrmDB.Contact';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<ContactRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { ContactRow } from \"./ContactRow\";\n\nexport namespace ContactService {\n    export const baseUrl = 'CrmDB/Contact';\n\n    export declare function Create(request: SaveRequest<ContactRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<ContactRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ContactRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ContactRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"CrmDB/Contact/Create\",\n        Update: \"CrmDB/Contact/Update\",\n        Delete: \"CrmDB/Contact/Delete\",\n        Retrieve: \"CrmDB/Contact/Retrieve\",\n        List: \"CrmDB/Contact/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>ContactService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { GenderRow } from \"./GenderRow\";\n\nexport interface GenderColumns {\n    GenderId: Column<GenderRow>;\n    Name: Column<GenderRow>;\n}\n\nexport class GenderColumns extends ColumnsBase<GenderRow> {\n    static readonly columnsKey = 'CrmDB.Gender';\n    static readonly Fields = fieldsProxy<GenderColumns>();\n}", "\uFEFFimport { StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface GenderForm {\n    Name: StringEditor;\n}\n\nexport class GenderForm extends PrefixedContext {\n    static readonly formKey = 'CrmDB.Gender';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!GenderForm.init)  {\n            GenderForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(GenderForm, [\n                'Name', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface GenderRow {\n    GenderId?: number;\n    Name?: string;\n}\n\nexport abstract class GenderRow {\n    static readonly idProperty = 'GenderId';\n    static readonly nameProperty = 'Name';\n    static readonly localTextPrefix = 'CrmDB.Gender';\n    static readonly lookupKey = 'CrmDB.Gender';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<GenderRow>('CrmDB.Gender') }\n    static async getLookupAsync() { return getLookupAsync<GenderRow>('CrmDB.Gender') }\n\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<GenderRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { GenderRow } from \"./GenderRow\";\n\nexport namespace GenderService {\n    export const baseUrl = 'CrmDB/Gender';\n\n    export declare function Create(request: SaveRequest<GenderRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<GenderRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<GenderRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<GenderRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"CrmDB/Gender/Create\",\n        Update: \"CrmDB/Gender/Update\",\n        Delete: \"CrmDB/Gender/Delete\",\n        Retrieve: \"CrmDB/Gender/Retrieve\",\n        List: \"CrmDB/Gender/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>GenderService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { JurisdictionRow } from \"./JurisdictionRow\";\n\nexport interface JurisdictionColumns {\n    JurisdictionId: Column<JurisdictionRow>;\n    JurisdictionTypeSystemCode: Column<JurisdictionRow>;\n    Name: Column<JurisdictionRow>;\n    Abbreviation: Column<JurisdictionRow>;\n    ListInd: Column<JurisdictionRow>;\n}\n\nexport class JurisdictionColumns extends ColumnsBase<JurisdictionRow> {\n    static readonly columnsKey = 'CrmDB.Jurisdiction';\n    static readonly Fields = fieldsProxy<JurisdictionColumns>();\n}", "\uFEFFimport { StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface JurisdictionForm {\n    Name: StringEditor;\n    Abbreviation: StringEditor;\n}\n\nexport class JurisdictionForm extends PrefixedContext {\n    static readonly formKey = 'CrmDB.Jurisdiction';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!JurisdictionForm.init)  {\n            JurisdictionForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(JurisdictionForm, [\n                'Name', w0,\n                'Abbreviation', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface JurisdictionRow {\n    JurisdictionId?: number;\n    JurisdictionTypeId?: number;\n    Name?: string;\n    Abbreviation?: string;\n    ListInd?: number;\n    JurisdictionTypeSystemCode?: string;\n}\n\nexport abstract class JurisdictionRow {\n    static readonly idProperty = 'JurisdictionId';\n    static readonly nameProperty = 'Name';\n    static readonly localTextPrefix = 'CrmDB.Jurisdiction';\n    static readonly lookupKey = 'CrmDB.Jurisdiction';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<JurisdictionRow>('CrmDB.Jurisdiction') }\n    static async getLookupAsync() { return getLookupAsync<JurisdictionRow>('CrmDB.Jurisdiction') }\n\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<JurisdictionRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { JurisdictionRow } from \"./JurisdictionRow\";\n\nexport namespace JurisdictionService {\n    export const baseUrl = 'CrmDB/Jurisdiction';\n\n    export declare function Create(request: SaveRequest<JurisdictionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<JurisdictionRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<JurisdictionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<JurisdictionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"CrmDB/Jurisdiction/Create\",\n        Update: \"CrmDB/Jurisdiction/Update\",\n        Delete: \"CrmDB/Jurisdiction/Delete\",\n        Retrieve: \"CrmDB/Jurisdiction/Retrieve\",\n        List: \"CrmDB/Jurisdiction/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>JurisdictionService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { PersonRow } from \"./PersonRow\";\n\nexport interface PersonColumns {\n    PersonId: Column<PersonRow>;\n    FirstName: Column<PersonRow>;\n    LastName: Column<PersonRow>;\n    GenderName: Column<PersonRow>;\n}\n\nexport class PersonColumns extends ColumnsBase<PersonRow> {\n    static readonly columnsKey = 'CrmDB.Person';\n    static readonly Fields = fieldsProxy<PersonColumns>();\n}", "\uFEFFimport { StringEditor, LookupEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface PersonForm {\n    FirstName: StringEditor;\n    LastName: StringEditor;\n    GenderId: LookupEditor;\n}\n\nexport class PersonForm extends PrefixedContext {\n    static readonly formKey = 'CrmDB.Person';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PersonForm.init)  {\n            PersonForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = LookupEditor;\n\n            initFormType(PersonForm, [\n                'FirstName', w0,\n                'LastName', w0,\n                'GenderId', w1\n            ]);\n        }\n    }\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface PersonRow {\n    PersonId?: number;\n    FirstName?: string;\n    LastName?: string;\n    FullName?: string;\n    GenderId?: number;\n    GenderName?: string;\n}\n\nexport abstract class PersonRow {\n    static readonly idProperty = 'PersonId';\n    static readonly nameProperty = 'FullName';\n    static readonly localTextPrefix = 'CrmDB.Person';\n    static readonly lookupKey = 'CrmDB.Person';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<PersonRow>('CrmDB.Person') }\n    static async getLookupAsync() { return getLookupAsync<PersonRow>('CrmDB.Person') }\n\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<PersonRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { PersonRow } from \"./PersonRow\";\n\nexport namespace PersonService {\n    export const baseUrl = 'CrmDB/Person';\n\n    export declare function Create(request: SaveRequest<PersonRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<PersonRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PersonRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PersonRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"CrmDB/Person/Create\",\n        Update: \"CrmDB/Person/Update\",\n        Delete: \"CrmDB/Person/Delete\",\n        Retrieve: \"CrmDB/Person/Retrieve\",\n        List: \"CrmDB/Person/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PersonService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { TaxCategoryRow } from \"./TaxCategoryRow\";\n\nexport interface TaxCategoryColumns {\n    TaxCategoryId: Column<TaxCategoryRow>;\n    SystemCode: Column<TaxCategoryRow>;\n    SystemName: Column<TaxCategoryRow>;\n    UserCode: Column<TaxCategoryRow>;\n    UserName: Column<TaxCategoryRow>;\n}\n\nexport class TaxCategoryColumns extends ColumnsBase<TaxCategoryRow> {\n    static readonly columnsKey = 'CrmDB.TaxCategory';\n    static readonly Fields = fieldsProxy<TaxCategoryColumns>();\n}", "\uFEFFimport { StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface TaxCategoryForm {\n    SystemCode: StringEditor;\n    SystemName: StringEditor;\n    UserCode: StringEditor;\n    UserName: StringEditor;\n}\n\nexport class TaxCategoryForm extends PrefixedContext {\n    static readonly formKey = 'CrmDB.TaxCategory';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!TaxCategoryForm.init)  {\n            TaxCategoryForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(TaxCategoryForm, [\n                'SystemCode', w0,\n                'SystemName', w0,\n                'UserCode', w0,\n                'UserName', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface TaxCategoryRow {\n    TaxCategoryId?: number;\n    SystemCode?: string;\n    SystemName?: string;\n    UserCode?: string;\n    UserName?: string;\n}\n\nexport abstract class TaxCategoryRow {\n    static readonly idProperty = 'TaxCategoryId';\n    static readonly nameProperty = 'SystemName';\n    static readonly localTextPrefix = 'CrmDB.TaxCategory';\n    static readonly lookupKey = 'CrmDB.TaxCategory';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<TaxCategoryRow>('CrmDB.TaxCategory') }\n    static async getLookupAsync() { return getLookupAsync<TaxCategoryRow>('CrmDB.TaxCategory') }\n\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<TaxCategoryRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { TaxCategoryRow } from \"./TaxCategoryRow\";\n\nexport namespace TaxCategoryService {\n    export const baseUrl = 'CrmDB/TaxCategory';\n\n    export declare function Create(request: SaveRequest<TaxCategoryRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<TaxCategoryRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<TaxCategoryRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<TaxCategoryRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"CrmDB/TaxCategory/Create\",\n        Update: \"CrmDB/TaxCategory/Update\",\n        Delete: \"CrmDB/TaxCategory/Delete\",\n        Retrieve: \"CrmDB/TaxCategory/Retrieve\",\n        List: \"CrmDB/TaxCategory/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>TaxCategoryService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { ZipCodeRow } from \"./ZipCodeRow\";\n\nexport interface ZipCodeColumns {\n    ZipCodeId: Column<ZipCodeRow>;\n    ZipCode: Column<ZipCodeRow>;\n    ListInd: Column<ZipCodeRow>;\n}\n\nexport class ZipCodeColumns extends ColumnsBase<ZipCodeRow> {\n    static readonly columnsKey = 'CrmDB.ZipCode';\n    static readonly Fields = fieldsProxy<ZipCodeColumns>();\n}", "\uFEFFimport { StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface ZipCodeForm {\n    ZipCode: StringEditor;\n}\n\nexport class ZipCodeForm extends PrefixedContext {\n    static readonly formKey = 'CrmDB.ZipCode';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ZipCodeForm.init)  {\n            ZipCodeForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(ZipCodeForm, [\n                'ZipCode', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface ZipCodeRow {\n    ZipCodeId?: number;\n    ZipCode?: string;\n    ListInd?: number;\n}\n\nexport abstract class ZipCodeRow {\n    static readonly idProperty = 'ZipCodeId';\n    static readonly nameProperty = 'ZipCode';\n    static readonly localTextPrefix = 'CrmDB.ZipCode';\n    static readonly lookupKey = 'CrmDB.ZipCode';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<ZipCodeRow>('CrmDB.ZipCode') }\n    static async getLookupAsync() { return getLookupAsync<ZipCodeRow>('CrmDB.ZipCode') }\n\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<ZipCodeRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { ZipCodeRow } from \"./ZipCodeRow\";\n\nexport namespace ZipCodeService {\n    export const baseUrl = 'CrmDB/ZipCode';\n\n    export declare function Create(request: SaveRequest<ZipCodeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<ZipCodeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ZipCodeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ZipCodeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"CrmDB/ZipCode/Create\",\n        Update: \"CrmDB/ZipCode/Update\",\n        Delete: \"CrmDB/ZipCode/Delete\",\n        Retrieve: \"CrmDB/ZipCode/Retrieve\",\n        List: \"CrmDB/ZipCode/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>ZipCodeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "import { Decorators } from '@serenity-is/corelib';\nimport { GridEditorDialog } from '@serenity-is/extensions';\nimport { ContactAddressForm, ContactAddressRow } from '@/ServerTypes/CrmDB';\r\n\r\n\r\n@Decorators.registerClass('CultureLinkCRM.CrmDB.ContactAddressEditDialog')\nexport class ContactAddressEditDialog extends GridEditorDialog<ContactAddressRow> {\n    protected getFormKey() { return ContactAddressForm.formKey; }\n    protected getNameProperty() { return ContactAddressRow.nameProperty; }\n    protected getLocalTextPrefix() { return ContactAddressRow.localTextPrefix; }\n    \n\n    protected form = new ContactAddressForm(this.idPrefix);\n}"],
  "mappings": "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",
  "names": ["require_Serenity", "__commonJSMin", "exports", "module", "import_corelib", "import_extensions", "import_corelib", "_AddressColumns", "__name", "AddressColumns", "import_corelib", "CityDialog", "CityForm", "CityRow", "CityService", "__name", "__decorateClass", "import_corelib", "JurisdictionDialog", "JurisdictionForm", "JurisdictionRow", "JurisdictionService", "__name", "__decorateClass", "import_corelib", "ZipCodeDialog", "ZipCodeForm", "ZipCodeRow", "ZipCodeService", "__name", "__decorateClass", "import_corelib", "_AddressForm", "prefix", "w0", "w1", "__name", "AddressForm", "import_corelib", "_AddressRow", "__async", "__name", "AddressRow", "import_corelib", "AddressService", "x", "r", "s", "o", "import_corelib", "_CityColumns", "__name", "CityColumns", "import_corelib", "_CityForm", "prefix", "w0", "__name", "CityForm", "import_corelib", "_CityRow", "__async", "__name", "CityRow", "import_corelib", "CityService", "x", "r", "s", "o", "import_corelib", "_ContactAddressColumns", "__name", "ContactAddressColumns", "import_corelib", "AddressDialog", "AddressForm", "AddressRow", "AddressService", "__name", "__decorateClass", "import_corelib", "_ContactAddressForm", "prefix", "w0", "__name", "ContactAddressForm", "import_corelib", "_ContactAddressRow", "__name", "ContactAddressRow", "import_corelib", "ContactAddressService", "x", "r", "s", "o", "import_corelib", "_ContactColumns", "__name", "ContactColumns", "import_corelib", "import_extensions", "import_corelib", "import_extensions", "ContactPersonEditDialog", "ContactPersonForm", "ContactPersonRow", "__name", "__decorateClass", "ContactPersonEditor", "ContactPersonColumns", "ContactPersonRow", "ContactPersonService", "container", "ContactPersonEditDialog", "row", "id", "itemId", "PersonRow", "x", "_a", "item", "__name", "__decorateClass", "import_corelib", "_ContactForm", "prefix", "w0", "w1", "w2", "ContactPersonEditor", "w3", "ContactAddressEditor", "__name", "ContactForm", "import_corelib", "_ContactPersonColumns", "__name", "ContactPersonColumns", "import_corelib", "PersonDialog", "PersonForm", "PersonRow", "PersonService", "__name", "__decorateClass", "import_corelib", "_ContactPersonForm", "prefix", "w0", "__name", "ContactPersonForm", "import_corelib", "_ContactPersonRow", "__name", "ContactPersonRow", "import_corelib", "ContactPersonService", "x", "r", "s", "o", "import_corelib", "_ContactRow", "__name", "ContactRow", "import_corelib", "ContactService", "x", "r", "s", "o", "import_corelib", "_GenderColumns", "__name", "GenderColumns", "import_corelib", "_GenderForm", "prefix", "w0", "__name", "GenderForm", "import_corelib", "_GenderRow", "__async", "__name", "GenderRow", "import_corelib", "GenderService", "x", "r", "s", "o", "import_corelib", "_JurisdictionColumns", "__name", "JurisdictionColumns", "import_corelib", "_JurisdictionForm", "prefix", "w0", "__name", "JurisdictionForm", "import_corelib", "_JurisdictionRow", "__async", "__name", "JurisdictionRow", "import_corelib", "JurisdictionService", "x", "r", "s", "o", "import_corelib", "_PersonColumns", "__name", "PersonColumns", "import_corelib", "_PersonForm", "prefix", "w0", "w1", "__name", "PersonForm", "import_corelib", "_PersonRow", "__async", "__name", "PersonRow", "import_corelib", "PersonService", "x", "r", "s", "o", "import_corelib", "_TaxCategoryColumns", "__name", "TaxCategoryColumns", "import_corelib", "_TaxCategoryForm", "prefix", "w0", "__name", "TaxCategoryForm", "import_corelib", "_TaxCategoryRow", "__async", "__name", "TaxCategoryRow", "import_corelib", "TaxCategoryService", "x", "r", "s", "o", "import_corelib", "_ZipCodeColumns", "__name", "ZipCodeColumns", "import_corelib", "_ZipCodeForm", "prefix", "w0", "__name", "ZipCodeForm", "import_corelib", "_ZipCodeRow", "__async", "__name", "ZipCodeRow", "import_corelib", "ZipCodeService", "x", "r", "s", "o", "import_corelib", "import_extensions", "ContactAddressEditDialog", "ContactAddressForm", "ContactAddressRow", "__name", "__decorateClass", "ContactAddressEditor", "ContactAddressColumns", "ContactAddressRow", "container", "ContactAddressEditDialog", "row", "id", "itemId", "AddressRow", "x", "_a", "item", "__name", "__decorateClass"]
}
